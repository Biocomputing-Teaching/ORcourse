# -*- coding: utf-8 -*-
"""LPwithPuLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CGXssSoWEedalG-_ke9PUpGmgUWPG1E2
"""

!pip install pulp
from pulp import LpProblem, LpVariable, LpMaximize, LpMinimize, LpStatus, lpSum, value, apis

# from pulp import pulpTestAll
# pulpTestAll()

# 1. Initialise model
model = LpProblem("Maximize LP", LpMaximize)

# 2. Define Decision Variables:
x1 = LpVariable('X1', lowBound=0, upBound=None, cat="Continuous")
x2 = LpVariable('X2', lowBound=0, upBound=None, cat="Continuous")
x3 = LpVariable('X3', lowBound=0, upBound=None, cat="Continuous")
x4 = LpVariable('X4', lowBound=0, upBound=None, cat="Continuous")

# 3. Define objective function:
model += lpSum(2 * x1 + 4 * x2 + 3 * x3 + x4), 'obj'

# 4. Define constraints: our model's limitations
model += lpSum(3 * x1 + x2 +x3 + 4 * x4) <= 12, 'c1'
model += lpSum(x1 -3*x2 + 2*x3 + 3 * x4) <= 7, 'c2'
model += lpSum(2*x1 + x2 + 3*x3 - x4) <= 11, 'c3'


# 5. Solve model
model.solve(apis.PULP_CBC_CMD(msg=0))

print(f"Status: {LpStatus[model.status]}\n")
for name, c in model.constraints.items():
    print(f"{name}: slack = {c.slack:.2f}, shadow price = {c.pi:.2f}")

for v in model.variables():
    print(v.name,"=", v.varValue)
print("Objective = ", value(model.objective))